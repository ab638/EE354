C51 COMPILER V9.56.0.0   PONG                                                              10/19/2017 22:03:37 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PONG
OBJECT MODULE PLACED IN .\Objects\pong.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pong.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\pong
                    -.lst) TABS(2) OBJECT(.\Objects\pong.obj)

line level    source

   1          // Austin Brummett
   2          // Project 1: 8051 Pong
   3          // Date Assigned: August 23,2017
   4          // Date Due: October 20, 2017
   5          //
   6          // This Program runs a variant of Pong
   7          // Port Descriptions
   8          // P1.5 = Player 1 Paddle
   9          // P1.6 = Player 2 Paddle
  10          // P1.0-P0.3 Decoder 1 controls column 1
  11          // P1.0-1.2, P1.4 Decoder 2 controls column 2
  12          // P3.0-P3.7 Driver Controls Rows
  13          
  14          #include <at89c51cc03.h> // CC03 library file
  15          //Declare any global variable here
  16          unsigned char ballRow;
  17          unsigned char ballCol;
  18          unsigned char ballDir ;
  19          
  20          
  21          //Subprograms
  22          void paddlesRus();
  23          void aBallisOkayIGuess();
  24          void BlinkRate(unsigned char); // C Delay for the ball
  25          extern void BallDelay(unsigned int); //assembly delay for balls
  26          extern void PaddleDelay(unsigned int); // assembly delay for paddles
  27          void movePaddles();
  28          
  29          
  30          
  31          //
  32          void main(void) //This is the start of the main program
  33          {
  34   1        unsigned char counter = 0;
  35   1        ballDir = 1;
  36   1        ballRow = 4;
  37   1        ballCol = 3;
  38   1        TMOD = 0x01;    //Timer 0 mode = not gated, internal clock, 16-bit mode
  39   1                          //Timer 1 mode = not gated, internal clock, 16-bit mode
  40   1        TH0 = 0xB1;         //Timer 0 set to B1E0 = 45536
  41   1        TL0 = 0xE0;
  42   1        EA=1;
  43   1        ET0 = 1;
  44   1        
  45   1        // loop forever
  46   1        while(1)
  47   1          {
  48   2          paddlesRus(); // set paddles      
  49   2          aBallisOkayIGuess(); // add & bounce the ball
  50   2        }
  51   1        
  52   1      }
  53          
  54          //creates paddles
C51 COMPILER V9.56.0.0   PONG                                                              10/19/2017 22:03:37 PAGE 2   

  55          void paddlesRus()
  56          {
  57   1          //set up left paddle
  58   1          P3 = 0x01;
  59   1          P1 = 0x0b;
  60   1          //PaddleDelay(1);
  61   1          BlinkRate(10);
  62   1          P1 = 0x0c;
  63   1        BlinkRate(10);
  64   1          //PaddleDelay(1);
  65   1          P1 = 0x0d;
  66   1        BlinkRate(10);
  67   1          //PaddleDelay(1);
  68   1      
  69   1          //set up right paddle
  70   1          P3 = 0x80;
  71   1          P1 = 0x13;      
  72   1        BlinkRate(10);
  73   1          //PaddleDelay(1);
  74   1          P1 = 0x14;
  75   1        BlinkRate(10);
  76   1          //PaddleDelay(1);
  77   1          P1 = 0x15;
  78   1          BlinkRate(10);
  79   1          //PaddleDelay(1);
  80   1        
  81   1        //  movePaddles();
  82   1      }
  83          void aBallisOkayIGuess()
  84          {
  85   1        
  86   1        unsigned char t = 0x01;
  87   1        
  88   1        if(ballDir == 1)
  89   1        {
  90   2          if((ballCol <= 7) )
  91   2          {
  92   3            P1 = ballRow;
  93   3            P1_3 = 1;
  94   3            t =  t << ballCol;
  95   3            P3 = t;
  96   3            ballCol++;
  97   3          }
  98   2          else if(ballCol >= 8)
  99   2          {
 100   3            P1 = ballRow;
 101   3            P1_4 = 1;
 102   3            t = t << (ballCol-8);
 103   3            P3 = t;
 104   3            ballCol++;
 105   3          
 106   3          if(ballCol == 15)
 107   3          {
 108   4            ballDir = ~ballDir;
 109   4          }
 110   3        }
 111   2        }
 112   1        else
 113   1        {
 114   2          if(ballCol >= 8)
 115   2          {
 116   3            P1 = ballRow;
C51 COMPILER V9.56.0.0   PONG                                                              10/19/2017 22:03:37 PAGE 3   

 117   3            P1_4 = 1;
 118   3            t = t << (ballCol-8);
 119   3            P3 = t;
 120   3            ballCol--;
 121   3          }
 122   2          else if(ballCol <= 7)
 123   2          {
 124   3            P1 = ballRow;
 125   3            P1_3 = 1;
 126   3            t = t << ballCol;
 127   3            P3 = t;
 128   3            ballCol--;
 129   3          
 130   3          if(ballCol == 0)
 131   3          {
 132   4            ballDir = ~ballDir;
 133   4          }
 134   3        }
 135   2        }
 136   1        BallDelay(1);
 137   1      }
 138            
 139          void BlinkRate(unsigned char x)
 140          {
 141   1        unsigned char lp,lp2; // create loop variables
 142   1        for(lp = 0; lp < x; lp++) // increment up the first loop
 143   1          for(lp2 = x; lp2 > 0; lp2--); // decrement the second loop
 144   1      }   
 145          
 146          void movePaddles()
 147          {
 148   1        unsigned char tmp;
 149   1        ADCF = 0x20; // P1.4 = ADC[4]
 150   1        ADCON = 0x20; // Enable ADC Function
 151   1        EA =  0;
 152   1       ADCON &= 0xF8; // Reset ADC Channel Select
 153   1       ADCON |= 0x20; // Select ADC = Ch0
 154   1       ADCON |= 0x20; // Use Standard mode
 155   1       ADCON |= 0x08; // Start ADC Convert
 156   1        if(ADDH + ADDL <= 0x85)
 157   1        {
 158   2          P1 = P1++;
 159   2        }
 160   1        else if(ADDH + ADDL > 0x85 | ADDH+ADDL <=0xAA)
 161   1          P1 = P1--;
 162   1        else if(ADDH+ADDL > 0xAA)
 163   1          P1 = P1--;
 164   1       ADCON &= 0xEF; // Clear ADEOC = 0
 165   1       
 166   1        
 167   1        ADCF = 0x40; // P1.5 = ADC[5]
 168   1        ADCON = 0x20; // Enable ADC Function
 169   1        EA = 0;
 170   1      ADCON &= 0xF8; // Reset ADC Channel Select
 171   1       ADCON |= 0x40; // Select ADC = Ch0
 172   1       ADCON |= 0x20; // Use Standard mode
 173   1       ADCON |= 0x08; // Start ADC Convert
 174   1        if(ADDH + ADDL <= 0x85)
 175   1          P1 = ADDH + ADDL;
 176   1        else if(ADDH + ADDL > 0x85 | ADDH+ADDL <=0xAA)
 177   1          P1 = ADDH+ADDL;
 178   1        else if(ADDH+ADDL > 0xAA)
C51 COMPILER V9.56.0.0   PONG                                                              10/19/2017 22:03:37 PAGE 4   

 179   1          P1 = ADDH+ADDL;
 180   1       ADCON &= 0xEF; // Clear ADEOC = 0
 181   1       
 182   1       ADCON &= 0xEF; // Clear ADEOC = 0
 183   1       
 184   1      }
*** WARNING C280 IN LINE 148 OF pong.c: 'tmp': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    539    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
